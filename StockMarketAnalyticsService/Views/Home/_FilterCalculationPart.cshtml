@using StockMarketServiceDatabase.Models.Processing
@model FilterCalculationResultModel
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h2>Calculation Results</h2>
                    <small>Calculation Date: @Model.CalculationDate.ToString("yyyy-MM-dd HH:mm:ss")</small>
                </div>
                <div class="card-body">
                    <h5 class="card-title">Summary</h5>
                    <ul class="list-group mb-4">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span><strong>Average Success Rate:</strong></span>
                            <span>@Model.AverageSuccessRate.ToString("f2") %</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span><strong>Last Data Revision:</strong></span>
                            <span>@Model.LastDataRevisionNum</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span><strong>Average Profit Rate:</strong></span>
                            <span>@Model.AverageProfitRate.ToString("f2") %</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span><strong>Average Loss Rate:</strong></span>
                            <span>@Model.AverageLossRate.ToString("f2") %</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span><strong>Success Deals:</strong></span>
                            <span>@Model.SuccessDeals</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span><strong>Failed Deals:</strong></span>
                            <span>@Model.FailedDeals</span>
                        </li>
                        @if (!string.IsNullOrWhiteSpace(Model.CalculationError))
                        {
                            <li class="list-group-item list-group-item-danger">
                                <strong>Error:</strong> @Model.CalculationError
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<br />
<h2 class="card-title row justify-content-center">
    Historical Trades Analysis
</h2>
<br />
@if (Model.TickerDeals != null && Model.TickerDeals.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col" data-type="text">Ticker</th>
                <th scope="col" data-type="number">Average Profit</th>
                <th scope="col" data-type="number">Success Rate</th>
                <th scope="col" data-type="number">Success Deals</th>
                <th scope="col" data-type="number">Failed Deals</th>
                <th scope="col" data-type="number">Total Deals</th>
            </tr>
        </thead>
        <tbody id="tickerTable">
            @foreach (var deal in Model.TickerDeals
                .OrderByDescending(d => d.AverageProfitRate))
            {
                <tr style="background-color:@(deal.AverageProfitRate > 0 ? "var(--profit-background-color)" : "var(--loss-background-color)")">
                    <td><a href="https://finviz.com/quote.ashx?t=@deal.Ticker&p=m">@deal.Ticker</a></td>
                    <td>@deal.AverageProfitRate.ToString("f2") %</td>
                    <td>@deal.SuccessRate.ToString("f2") %</td>
                    <td>@deal.SuccessDeals</td>
                    <td>@deal.FailedDeals</td>
                    <td>@deal.Deals.Count</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No deals available.</p>
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const headers = document.querySelectorAll("th");
            const table = document.getElementById("tickerTable");
            headers.forEach((header, columnIndex) => {
                header.addEventListener("click", () => {
                    const type = header.getAttribute("data-type");
                    const isAscending = header.getAttribute("data-sort-direction") === "asc";
                    const rows = Array.from(table.rows);

                    rows.sort((a, b) => {
                        const cellA = a.cells[columnIndex].innerText.trim();
                        const cellB = b.cells[columnIndex].innerText.trim();

                        if (type === "number") {
                            const numA = parseFloat(cellA) || 0;
                            const numB = parseFloat(cellB) || 0;
                            return isAscending ? numA - numB : numB - numA;
                        } else if (type === "text") {
                            return isAscending
                                ? cellA.localeCompare(cellB)
                                : cellB.localeCompare(cellA);
                        }
                    });

                    header.setAttribute("data-sort-direction", isAscending ? "desc" : "asc");
                    rows.forEach(row => table.appendChild(row));
                });
            });
        });
    </script>
}
